import React, { useEffect, useState } from "react";
import { useSearchParams, useNavigate, useLocation } from "react-router-dom";
import { FaCheckCircle, FaTruck, FaHome } from "react-icons/fa";
import { useModernNotification } from "../../components/client/ModernNotification";
import { useCart } from "../../contexts/CartContext";
import axios from "axios";
import PaymentStatusModal from "../../components/client/PaymentStatusModal";
import CartUpdateNotification from "../../components/client/CartUpdateNotification";


const CheckoutSuccess: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const location = useLocation();
  const { showOrderSuccess } = useModernNotification();
  const { removeOrderedItemsFromCart } = useCart();
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [paymentStatus, setPaymentStatus] = useState<'processing' | 'success' | 'failed' | 'unknown'>('processing');
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showCartNotification, setShowCartNotification] = useState(false);


  const orderId = searchParams.get("orderId");
  const paymentMethod = searchParams.get("paymentMethod");
  const status = searchParams.get("status"); // T·ª´ ZaloPay

  useEffect(() => {
    console.log("CheckoutSuccess mounted with:", {
      orderId,
      paymentMethod,
      status,
    });

    if (!orderId) {
      console.log("Kh√¥ng c√≥ orderId, chuy·ªÉn v·ªÅ trang ch·ªß");
      navigate("/");
      return;
    }

    // ‚úÖ S·ª¨A: KI·ªÇM TRA TR·∫†NG TH√ÅI TH·ª∞C T·∫æ T·ª™ DATABASE
    const handlePaymentResult = async () => {
      try {
        const token = localStorage.getItem("token");

        // X·ª≠ l√Ω theo ph∆∞∆°ng th·ª©c thanh to√°n
        if (paymentMethod === "zalopay") {
          if (status === "1") {
            // ‚úÖ Thanh to√°n ZaloPay th√†nh c√¥ng t·ª´ URL
            console.log("üîî ZaloPay payment success from URL");

<<<<<<< HEAD
    showSuccess(
      "Thanh to√°n ZaloPay th√†nh c√¥ng!",
      `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
    );

    // X√≥a s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
    const pendingOrder = localStorage.getItem("pendingOrder");
    if (pendingOrder) {
      const orderData = JSON.parse(pendingOrder);
      if (orderData.orderItems) {
        await removeOrderedItemsFromCart(orderData.orderItems);
      }
      localStorage.removeItem("pendingOrder");
    }

    // ‚úÖ S·ª¨A: ƒê·ª£i callback r·ªìi fetch data m·ªôt l·∫ßn
    setTimeout(async () => {
      await fetchOrderDetails();
    }, 3000); // ƒê·ª£i 3 gi√¢y cho callback x·ª≠ l√Ω
    
  } else {
         // ‚ùå Thanh to√°n ZaloPay th·∫•t b·∫°i
     await axios.delete(`/api/order/${orderId}`, {
       headers: { Authorization: `Bearer ${token}` },
     });
    showError("Thanh to√°n ZaloPay th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
    navigate("/checkout?error=payment_cancelled");
    return;
  }
}else if (paymentMethod === "momo") {
          // Ki·ªÉm tra t·ª´ URL parameters
          const resultCode = searchParams.get("resultCode");
          if (resultCode === "0") {
            // ‚úÖ Thanh to√°n Momo th√†nh c√¥ng
            showSuccess(
              "Thanh to√°n Momo th√†nh c√¥ng!",
=======
            showOrderSuccess(
              orderId,
>>>>>>> f02c39049ad512ebf3b7dfa5f69c0d7abaf47e53
              `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
            );

            // ‚úÖ X√≥a s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
            const pendingOrder = localStorage.getItem("pendingOrder");
            if (pendingOrder) {
              const orderData = JSON.parse(pendingOrder);
              if (orderData.orderItems) {
                await handleRemoveFromCart(orderData.orderItems);
              }
              localStorage.removeItem("pendingOrder");
            }

            // ‚úÖ ƒê·ª£i callback r·ªìi fetch data m·ªôt l·∫ßn
            setTimeout(async () => {
              await fetchOrderDetails();
            }, 2000); // ƒê·ª£i 2 gi√¢y cho callback x·ª≠ l√Ω

          } else {
<<<<<<< HEAD
                         // ‚ùå Thanh to√°n Momo th·∫•t b·∫°i
             await axios.delete(`/api/order/${orderId}`, {
               headers: { Authorization: `Bearer ${token}` },
             });
            showError("Thanh to√°n Momo th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
            navigate("/checkout?error=payment_cancelled");
=======
            // ‚ùå Thanh to√°n ZaloPay th·∫•t b·∫°i
            await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
              headers: { Authorization: `Bearer ${token}` },
            });
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
            navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=zalopay&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
>>>>>>> f02c39049ad512ebf3b7dfa5f69c0d7abaf47e53
            return;
            return;
          }
                } else if (paymentMethod === "momo") {
          // ‚úÖ ∆Øu ti√™n ki·ªÉm tra URL params tr∆∞·ªõc
          const resultCode = searchParams.get("resultCode");
          console.log("üîç MoMo resultCode from URL:", resultCode);
          
          if (resultCode === "0") {
            // ‚úÖ Thanh to√°n th√†nh c√¥ng d·ª±a tr√™n URL params - KH√îNG c·∫ßn ki·ªÉm tra backend
            console.log("‚úÖ MoMo payment successful based on URL params - proceeding with success flow");
            showOrderSuccess(
              orderId,
              `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
            );
            
            // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
            const pendingOrder = localStorage.getItem("pendingOrder");
            if (pendingOrder) {
              const orderData = JSON.parse(pendingOrder);
              if (orderData.orderItems) {
                await handleRemoveFromCart(orderData.orderItems);
              }
              localStorage.removeItem("pendingOrder");
            }
            
            // ‚úÖ ƒê·ª£i webhook x·ª≠ l√Ω r·ªìi fetch order details
            setTimeout(async () => {
              await fetchOrderDetails();
            }, 3000); // ƒê·ª£i 3 gi√¢y cho webhook x·ª≠ l√Ω
          } else {
            // ‚è≥ Ki·ªÉm tra backend n·∫øu kh√¥ng c√≥ resultCode ho·∫∑c resultCode kh√°c 0
            console.log("üîÑ Checking MoMo payment status from backend...");
            
            try {
              // Ki·ªÉm tra tr·∫°ng th√°i t·ª´ backend
              const statusResponse = await axios.get(`http://localhost:8000/api/payment/momo/status/${orderId}`, {
                headers: { Authorization: `Bearer ${token}` }
              });
              
              console.log("üì¶ MoMo payment status response:", statusResponse.data);
              
              // ‚úÖ Ki·ªÉm tra c·∫£ tr·∫°ng th√°i thanh to√°n v√† tr·∫°ng th√°i ƒë∆°n h√†ng
              if (statusResponse.data.isPaid && statusResponse.data.paymentStatus === 'paid') {
                // ‚úÖ Thanh to√°n th√†nh c√¥ng
                showOrderSuccess(
                  orderId,
                  `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                );

                // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
                const pendingOrder = localStorage.getItem("pendingOrder");
                if (pendingOrder) {
                  const orderData = JSON.parse(pendingOrder);
                  if (orderData.orderItems) {
                    await handleRemoveFromCart(orderData.orderItems);
                  }
                  localStorage.removeItem("pendingOrder");
                }
                
                await fetchOrderDetails();
              } else if (statusResponse.data.paymentStatus === 'failed' || statusResponse.data.status === 'cancelled') {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy
                console.log("‚ùå MoMo payment failed or cancelled:", statusResponse.data);
                
                // X√≥a ƒë∆°n h√†ng th·∫•t b·∫°i
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=momo&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              } else {
                // ‚è≥ ƒêang ch·ªù x·ª≠ l√Ω - ƒë·ª£i th√™m v√† ki·ªÉm tra l·∫°i (ch·ªâ 1 l·∫ßn)
                console.log("‚è≥ MoMo payment pending, retrying once...");
                
                setTimeout(async () => {
                  try {
                    const retryResponse = await axios.get(`http://localhost:8000/api/payment/momo/status/${orderId}`, {
                      headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    if (retryResponse.data.isPaid && retryResponse.data.paymentStatus === 'paid') {
                      showOrderSuccess(
                        orderId,
                        `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                      );
                      
                      const pendingOrder = localStorage.getItem("pendingOrder");
                      if (pendingOrder) {
                        const orderData = JSON.parse(pendingOrder);
                        if (orderData.orderItems) {
                          await handleRemoveFromCart(orderData.orderItems);
                        }
                        localStorage.removeItem("pendingOrder");
                      }
                      
                      await fetchOrderDetails();
                    } else {
                      // X√≥a ƒë∆°n h√†ng th·∫•t b·∫°i
                      try {
                        await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                          headers: { Authorization: `Bearer ${token}` },
                        });
                      } catch (deleteError) {
                        console.log("‚ö†Ô∏è Order already deleted or not found");
                      }
                      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                      navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=momo&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                      return;
                    }
                  } catch (retryError) {
                    console.error("‚ùå Error retrying MoMo status check:", retryError);
                    try {
                      await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                        headers: { Authorization: `Bearer ${token}` },
                      });
                    } catch (deleteError) {
                      console.log("‚ö†Ô∏è Order already deleted or not found");
                    }
                    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                    navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=momo&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                    return;
                  }
                }, 3000);
              }
            } catch (statusError) {
              console.error("‚ùå Error checking MoMo payment status:", statusError);
              
              // N·∫øu kh√¥ng th·ªÉ ki·ªÉm tra backend, d·ª±a v√†o URL parameters
              if (resultCode === "0") {
                // C√≥ resultCode = 0 -> th√†nh c√¥ng
                showOrderSuccess(
                  orderId,
                  `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                );
                
                const pendingOrder = localStorage.getItem("pendingOrder");
                if (pendingOrder) {
                  const orderData = JSON.parse(pendingOrder);
                  if (orderData.orderItems) {
                    await handleRemoveFromCart(orderData.orderItems);
                  }
                  localStorage.removeItem("pendingOrder");
                }
                
                setTimeout(async () => {
                  await fetchOrderDetails();
                }, 3000);
              } else if (resultCode && resultCode !== "0") {
                // C√≥ resultCode nh∆∞ng kh√¥ng ph·∫£i 0 -> th·∫•t b·∫°i
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=momo&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              } else {
                // Kh√¥ng c√≥ resultCode -> chuy·ªÉn v·ªÅ trang th·∫•t b·∫°i
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=momo&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              }
            }
          }
        } else if (paymentMethod === "zalopay") {
          // ‚úÖ ∆Øu ti√™n ki·ªÉm tra URL params tr∆∞·ªõc
          const zp_ResponseCode = searchParams.get("zp_ResponseCode");
          console.log("üîç ZaloPay zp_ResponseCode from URL:", zp_ResponseCode);
          
          if (zp_ResponseCode === "1") {
            // ‚úÖ Thanh to√°n th√†nh c√¥ng d·ª±a tr√™n URL params
            console.log("‚úÖ ZaloPay payment successful based on URL params");
            showOrderSuccess(
              orderId,
              `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
            );
            
            const pendingOrder = localStorage.getItem("pendingOrder");
            if (pendingOrder) {
              const orderData = JSON.parse(pendingOrder);
              if (orderData.orderItems) {
                await handleRemoveFromCart(orderData.orderItems);
              }
              localStorage.removeItem("pendingOrder");
            }
            
            await fetchOrderDetails();
          } else {
            // ‚è≥ Ki·ªÉm tra backend n·∫øu kh√¥ng c√≥ zp_ResponseCode ho·∫∑c kh√°c 1
            console.log("üîÑ Checking ZaloPay payment status from backend...");
            
            try {
              // Ki·ªÉm tra tr·∫°ng th√°i t·ª´ backend
              const statusResponse = await axios.get(`http://localhost:8000/api/order/zalo-pay/status/${orderId}`, {
                headers: { Authorization: `Bearer ${token}` }
              });
              
              console.log("üì¶ ZaloPay payment status response:", statusResponse.data);
              
              if (statusResponse.data.synced && statusResponse.data.isPaid) {
                // ‚úÖ Thanh to√°n th√†nh c√¥ng t·ª´ backend
                showOrderSuccess(
                  orderId,
                  `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                );
                
                const pendingOrder = localStorage.getItem("pendingOrder");
                if (pendingOrder) {
                  const orderData = JSON.parse(pendingOrder);
                  if (orderData.orderItems) {
                    await handleRemoveFromCart(orderData.orderItems);
                  }
                  localStorage.removeItem("pendingOrder");
                }
                
                await fetchOrderDetails();
              } else {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i
                console.log("‚ùå ZaloPay payment failed");
                
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=zalopay&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              }
            } catch (statusError) {
              console.error("‚ùå Error checking ZaloPay payment status:", statusError);
              
              // N·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c, d·ª±a v√†o URL parameters
              if (zp_ResponseCode === "1") {
                showOrderSuccess(
                  orderId,
                  `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                );
                
                const pendingOrder = localStorage.getItem("pendingOrder");
                if (pendingOrder) {
                  const orderData = JSON.parse(pendingOrder);
                  if (orderData.orderItems) {
                    await handleRemoveFromCart(orderData.orderItems);
                  }
                  localStorage.removeItem("pendingOrder");
                }
                
                setTimeout(async () => {
                  await fetchOrderDetails();
                }, 2000);
              } else {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=zalopay&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              }
            }
          }
        } else if (paymentMethod === "vnpay") {
          // ‚úÖ ∆Øu ti√™n ki·ªÉm tra URL params tr∆∞·ªõc
          const vnp_ResponseCode = searchParams.get("vnp_ResponseCode");
          console.log("üîç VNPay vnp_ResponseCode from URL:", vnp_ResponseCode);
          
          if (vnp_ResponseCode === "00") {
            // ‚úÖ Thanh to√°n th√†nh c√¥ng d·ª±a tr√™n URL params
            console.log("‚úÖ VNPay payment successful based on URL params");
            showOrderSuccess(
              orderId,
              `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
            );
            
            const pendingOrder = localStorage.getItem("pendingOrder");
            if (pendingOrder) {
              const orderData = JSON.parse(pendingOrder);
              if (orderData.orderItems) {
                await handleRemoveFromCart(orderData.orderItems);
              }
              localStorage.removeItem("pendingOrder");
            }
            
            await fetchOrderDetails();
          } else {
<<<<<<< HEAD
                         // ‚ùå Thanh to√°n VNPAY th·∫•t b·∫°i
             await axios.delete(`/api/order/${orderId}`, {
               headers: { Authorization: `Bearer ${token}` },
             });
            showError("Thanh to√°n VNPAY th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
            navigate("/checkout?error=payment_cancelled");
            return;
=======
            // ‚è≥ Ki·ªÉm tra backend n·∫øu kh√¥ng c√≥ vnp_ResponseCode ho·∫∑c kh√°c 00
            console.log("üîÑ Checking VNPay payment status from backend...");
            
            try {
              // Ki·ªÉm tra tr·∫°ng th√°i t·ª´ backend
              const statusResponse = await axios.get(`http://localhost:8000/api/payment/vnpay/status/${orderId}`, {
                headers: { Authorization: `Bearer ${token}` }
              });
              
              console.log("üì¶ VNPay payment status response:", statusResponse.data);
              
              if (statusResponse.data.synced && statusResponse.data.isPaid) {
                // ‚úÖ Thanh to√°n th√†nh c√¥ng t·ª´ backend
                showOrderSuccess(
                  orderId,
                  `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                );
                
                const pendingOrder = localStorage.getItem("pendingOrder");
                if (pendingOrder) {
                  const orderData = JSON.parse(pendingOrder);
                  if (orderData.orderItems) {
                    await handleRemoveFromCart(orderData.orderItems);
                  }
                  localStorage.removeItem("pendingOrder");
                }
                
                await fetchOrderDetails();
              } else {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i
                console.log("‚ùå VNPay payment failed");
                
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=vnpay&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              }
            } catch (statusError) {
              console.error("‚ùå Error checking VNPay payment status:", statusError);
              
              // N·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c, d·ª±a v√†o URL parameters
              if (vnp_ResponseCode === "00") {
                showOrderSuccess(
                  orderId,
                  `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
                );
                
                const pendingOrder = localStorage.getItem("pendingOrder");
                if (pendingOrder) {
                  const orderData = JSON.parse(pendingOrder);
                  if (orderData.orderItems) {
                    await handleRemoveFromCart(orderData.orderItems);
                  }
                  localStorage.removeItem("pendingOrder");
                }
                
                setTimeout(async () => {
                  await fetchOrderDetails();
                }, 2000);
              } else {
                // ‚ùå Thanh to√°n th·∫•t b·∫°i
                try {
                  await axios.delete(`http://localhost:8000/api/order/${orderId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                } catch (deleteError) {
                  console.log("‚ö†Ô∏è Order already deleted or not found");
                }
                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
                navigate(`/checkout/failed?orderId=${orderId}&paymentMethod=vnpay&error=payment_cancelled&amount=${orderDetails?.totalPrice || ''}`);
                return;
              }
            }
>>>>>>> f02c39049ad512ebf3b7dfa5f69c0d7abaf47e53
          }
        } else if (paymentMethod === "credit-card") {
          // Credit Card - Hi·ªÉn th·ªã th√†nh c√¥ng (gi·∫£ l·∫≠p)
          showOrderSuccess(
            orderId,
            `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
          );
          
          // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
          const pendingOrder = localStorage.getItem("pendingOrder");
          if (pendingOrder) {
            const orderData = JSON.parse(pendingOrder);
            if (orderData.orderItems) {
              await handleRemoveFromCart(orderData.orderItems);
            }
            localStorage.removeItem("pendingOrder");
          }
          
          await fetchOrderDetails();
        } else if (paymentMethod === "bank-transfer") {
          // Bank Transfer - Hi·ªÉn th·ªã ch·ªù x√°c nh·∫≠n
          showOrderSuccess(
            orderId,
            `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ch·ªù x√°c nh·∫≠n chuy·ªÉn kho·∫£n.`
          );
          
          // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
          const pendingOrder = localStorage.getItem("pendingOrder");
          if (pendingOrder) {
            const orderData = JSON.parse(pendingOrder);
            if (orderData.orderItems) {
              await handleRemoveFromCart(orderData.orderItems);
            }
            localStorage.removeItem("pendingOrder");
          }
          
          await fetchOrderDetails();
        } else if (paymentMethod === "COD") {
          // COD - Hi·ªÉn th·ªã th√†nh c√¥ng ngay
          showOrderSuccess(
            orderId,
            `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
          );
          
          // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
          const pendingOrder = localStorage.getItem("pendingOrder");
          if (pendingOrder) {
            const orderData = JSON.parse(pendingOrder);
            if (orderData.orderItems) {
              await handleRemoveFromCart(orderData.orderItems);
            }
            localStorage.removeItem("pendingOrder");
          }
          
          await fetchOrderDetails();
        } else {
          // ‚úÖ Ph∆∞∆°ng th·ª©c kh√°c - l·∫•y th√¥ng tin ƒë∆°n h√†ng
          await fetchOrderDetails();
        }
      } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n:", error);
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
        navigate(`/checkout/failed?orderId=${orderId}&error=payment_error&amount=${orderDetails?.totalPrice || ''}`);
        return;
      }
    };

    handlePaymentResult();
  }, [
    orderId,
    paymentMethod,
    status,
    searchParams,
    navigate,
  ]);

  // ‚úÖ Force refresh profile data khi order ƒë∆∞·ª£c c·∫≠p nh·∫≠t
  useEffect(() => {
    if (orderDetails) {
      console.log("üîî Order details updated:", {
        status: orderDetails.status,
        isPaid: orderDetails.isPaid,
        paymentStatus: orderDetails.paymentStatus
      });
      
      if (orderDetails.isPaid && orderDetails.paymentStatus === "paid") {
        // G·ª≠i event ƒë·ªÉ profile component refresh
        window.dispatchEvent(new CustomEvent('orderUpdated'));
        console.log("üîî Dispatched orderUpdated event for profile refresh");
        
        // ‚úÖ G·ª≠i th√™m event ƒë·ªÉ refresh cart
        window.dispatchEvent(new CustomEvent('cartUpdated'));
        console.log("üîî Dispatched cartUpdated event");
      }
    }
  }, [orderDetails]);

  // ‚úÖ S·ª≠ d·ª•ng removeOrderedItemsFromCart t·ª´ CartContext

  // ‚úÖ Helper function ƒë·ªÉ x√≥a kh·ªèi gi·ªè h√†ng v√† hi·ªÉn th·ªã th√¥ng b√°o
  const handleRemoveFromCart = async (orderItems: any[]) => {
    try {
<<<<<<< HEAD
      const token = localStorage.getItem("token");
      const productIds = orderItems.map((item) => item.product);

             await axios.post(
         `/api/cart/remove-multiple`,
         { productIds },
         { headers: { Authorization: `Bearer ${token}` } }
       );

      console.log("‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng sau thanh to√°n th√†nh c√¥ng");
=======
      await handleRemoveFromCart(orderItems);
      setShowCartNotification(true);
>>>>>>> f02c39049ad512ebf3b7dfa5f69c0d7abaf47e53
    } catch (error) {
      console.error("L·ªói x√≥a kh·ªèi gi·ªè h√†ng:", error);
    }
  };

  // ‚úÖ L·∫•y th√¥ng tin ƒë∆°n h√†ng v·ªõi retry logic
  const fetchOrderDetails = async (retryCount = 0) => {
    try {
      const token = localStorage.getItem("token");
      console.log(`üîÑ Fetching order details for: ${orderId} (attempt ${retryCount + 1})`);

             const response = await axios.get(
         `/api/order/${orderId}`,
         {
           headers: { Authorization: `Bearer ${token}` },
         }
       );

      console.log("üì¶ Order details received:", {
        id: response.data._id,
        status: response.data.status,
        paymentMethod: response.data.paymentMethod,
        isPaid: response.data.isPaid,
        paymentStatus: response.data.paymentStatus,
        paidAt: response.data.paidAt,
      });

      setOrderDetails(response.data);
      
      // ‚úÖ Ki·ªÉm tra n·∫øu order ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng v√† retry
      if (response.data.status === 'draft' && response.data.paymentStatus === 'awaiting_payment' && retryCount < 3) {
        console.log("‚ö†Ô∏è Order ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t, retrying in 2 seconds...");
        setTimeout(() => fetchOrderDetails(retryCount + 1), 2000);
        return;
      }
      
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);

      // N·∫øu l√† 404, c√≥ th·ªÉ ƒë∆°n h√†ng ƒë√£ b·ªã x√≥a do thanh to√°n th·∫•t b·∫°i
      if (error.response?.status === 404) {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th·∫•t b·∫°i
        navigate(`/checkout/failed?orderId=${orderId || ''}&error=payment_error&amount=${orderDetails?.totalPrice || ''}`);
        return;
      } else if (retryCount < 3) {
        // Retry n·∫øu c√≥ l·ªói network
        console.log("‚ö†Ô∏è Network error, retrying in 2 seconds...");
        setTimeout(() => fetchOrderDetails(retryCount + 1), 2000);
        return;
      }
    } finally {
      if (retryCount === 0) {
        setLoading(false);
      }
    }
  };

  // ‚úÖ H√†m format gi√° ti·ªÅn
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat("vi-VN").format(price) + " ƒë";
  };

  // ‚úÖ H√†m hi·ªÉn th·ªã t√™n ph∆∞∆°ng th·ª©c thanh to√°n
<<<<<<< HEAD
    const getPaymentMethodDisplay = () => {
    switch (paymentMethod) {
=======
  const getPaymentMethodDisplay = () => {
    const method = orderDetails?.paymentMethod || paymentMethod;
    switch (method) {
>>>>>>> f02c39049ad512ebf3b7dfa5f69c0d7abaf47e53
      case "COD":
        return "Thanh to√°n khi nh·∫≠n h√†ng (COD)";
      case "zalopay":
        return "ZaloPay";
      case "momo":
        return "Momo";
      case "vnpay":
        return "VNPAY";
      case "credit-card":
        return "Th·∫ª t√≠n d·ª•ng";
<<<<<<< HEAD
=======
      case "bank-transfer":
        return "Chuy·ªÉn kho·∫£n ng√¢n h√†ng";
      case "e-wallet":
        return "V√≠ ƒëi·ªán t·ª≠";
>>>>>>> f02c39049ad512ebf3b7dfa5f69c0d7abaf47e53
      default:
        return method || "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // ‚úÖ H√†m hi·ªÉn th·ªã tr·∫°ng th√°i ƒë∆°n h√†ng
  const getOrderStatus = (status: string) => {
    const statusMap: { [key: string]: { text: string; color: string } } = {
      draft: { text: "ƒêang t·∫°o", color: "text-gray-500" },
      pending: { text: "Ch·ªù x√°c nh·∫≠n", color: "text-yellow-600" },
      confirmed: { text: "ƒê√£ x√°c nh·∫≠n", color: "text-blue-600" },
      processing: { text: "ƒêang x·ª≠ l√Ω", color: "text-purple-600" },
      shipped: { text: "ƒêang giao", color: "text-orange-600" },
      delivered_success: { text: "Giao th√†nh c√¥ng", color: "text-green-600" },
      delivered_failed: { text: "Giao th·∫•t b·∫°i", color: "text-red-600" },
      completed: { text: "Ho√†n th√†nh", color: "text-green-600" },
      cancelled: { text: "ƒê√£ h·ªßy", color: "text-red-600" },
      refund_requested: { text: "Y√™u c·∫ßu ho√†n ti·ªÅn", color: "text-orange-600" },
      refunded: { text: "ƒê√£ ho√†n ti·ªÅn", color: "text-gray-600" },
      payment_failed: { text: "Thanh to√°n th·∫•t b·∫°i", color: "text-red-600" },
    };

    return (
      statusMap[status] || { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "text-gray-500" }
    );
  };

  // ‚úÖ H√†m hi·ªÉn th·ªã tr·∫°ng th√°i thanh to√°n
  const getPaymentStatus = (order: any) => {
    if (!order) return "Kh√¥ng x√°c ƒë·ªãnh";
    
    if (order.paymentMethod === "COD") {
      return order.isPaid ? "ƒê√£ thanh to√°n COD" : "Ch∆∞a thanh to√°n COD";
    } else {
      if (order.isPaid && order.paymentStatus === "paid") {
        return `ƒê√£ thanh to√°n ${getPaymentMethodDisplay()}`;
      } else if (order.paymentStatus === "failed") {
        return "Thanh to√°n th·∫•t b·∫°i";
      } else if (order.paymentStatus === "awaiting_payment") {
        return "Ch∆∞a thanh to√°n";
      } else if (order.paymentStatus === "pending") {
        return "Ch∆∞a thanh to√°n";
      } else {
        return "Ch∆∞a thanh to√°n";
      }
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">
            {paymentMethod === "zalopay" && status === "1"
              ? "ƒêang x·ª≠ l√Ω thanh to√°n ZaloPay..."
              : "ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng..."}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Main Content - Left Column */}
            <div className="lg:col-span-2">
              {/* Success Header */}
              <div className="text-center mb-8">
                <div className="w-24 h-24 mx-auto mb-6 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center shadow-lg">
                  <FaCheckCircle className="w-14 h-14 text-white" />
                </div>
                <h1 className="text-4xl font-bold text-gray-900 mb-3">
                  ƒê·∫∑t h√†ng th√†nh c√¥ng!
                </h1>
                <p className="text-lg text-gray-600 mb-2">
                  {["zalopay", "momo", "vnpay", "credit-card"].includes(
                    paymentMethod || ""
                  )
                    ? `Thanh to√°n ${getPaymentMethodDisplay()} ƒë√£ ho√†n t·∫•t`
                    : "C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i TechTrend"}
                </p>
                <p className="text-sm text-gray-500">
                  M√£ ƒë∆°n h√†ng: #{orderDetails?._id || orderId}
                </p>
              </div>

              {/* Order Details */}
              {orderDetails && (
                <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
                  <div className="border-b border-gray-200 pb-4 mb-4">
                    <h2 className="text-xl font-semibold text-gray-900">
                      Th√¥ng tin ƒë∆°n h√†ng
                    </h2>
                  </div>

                  <div className="space-y-4">
                    {/* Th√¥ng tin c∆° b·∫£n */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Ph∆∞∆°ng th·ª©c thanh to√°n
                        </label>
                        <p className="text-gray-900">{getPaymentMethodDisplay()}</p>
                      </div>
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Tr·∫°ng th√°i ƒë∆°n h√†ng
                        </label>
                        <p
                          className={`font-medium ${
                            getOrderStatus(orderDetails.status).color
                          }`}
                        >
                          {getOrderStatus(orderDetails.status).text}
                        </p>
                      </div>
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Tr·∫°ng th√°i thanh to√°n
                        </label>
                        <p className="text-gray-900">
                          {getPaymentStatus(orderDetails)}
                        </p>
                      </div>
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          T·ªïng ti·ªÅn
                        </label>
                        <p className="text-lg font-semibold text-green-600">
                          {formatPrice(orderDetails.totalPrice)}
                        </p>
                      </div>
                    </div>

                    {/* ƒê·ªãa ch·ªâ giao h√†ng */}
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        ƒê·ªãa ch·ªâ giao h√†ng
                      </label>
                      <div className="mt-1 text-gray-900">
                        <p>{orderDetails.shippingAddress.fullName}</p>
                        <p>{orderDetails.shippingAddress.phone}</p>
                        <p>
                          {orderDetails.shippingAddress.address},{" "}
                          {orderDetails.shippingAddress.city}
                        </p>
                      </div>
                    </div>

                    {/* S·∫£n ph·∫©m */}
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        S·∫£n ph·∫©m ({orderDetails.orderItems.length} m√≥n)
                      </label>
                      <div className="mt-2 space-y-3">
                        {orderDetails.orderItems.map((item: any, index: number) => (
                          <div
                            key={index}
                            className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                          >
                            <img
                              src={item.image}
                              alt={item.name}
                              className="w-16 h-16 object-cover rounded-lg shadow-sm"
                            />
                            <div className="flex-1">
                              <p className="font-medium text-gray-900 text-lg">
                                {item.name}
                              </p>
                              <p className="text-sm text-gray-600">
                                S·ªë l∆∞·ª£ng: {item.quantity} √ó{" "}
                                {formatPrice(item.price)}
                              </p>
                            </div>
                            <div className="text-right">
                              <p className="font-semibold text-gray-900 text-lg">
                                {formatPrice(item.quantity * item.price)}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* T·ªïng c·ªông */}
                    <div className="border-t border-gray-200 pt-4">
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-600">T·∫°m t√≠nh:</span>
                          <span>{formatPrice(orderDetails.itemsPrice)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-600">Ph√≠ v·∫≠n chuy·ªÉn:</span>
                          <span>{formatPrice(orderDetails.shippingPrice)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-600">Thu·∫ø:</span>
                          <span>{formatPrice(orderDetails.taxPrice)}</span>
                        </div>
                        <div className="flex justify-between text-lg font-semibold border-t pt-2">
                          <span>T·ªïng c·ªông:</span>
                          <span className="text-green-600">
                            {formatPrice(orderDetails.totalPrice)}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Next Steps */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 mb-6 border border-blue-200">
                <h3 className="text-lg font-semibold text-blue-900 mb-4 flex items-center">
                  <FaTruck className="w-5 h-5 mr-2" />
                  B∆∞·ªõc ti·∫øp theo
                </h3>
                <div className="space-y-3 text-blue-800">
                  {orderDetails?.paymentMethod === "COD" ? (
                    <>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n t·ª´ c·ª≠a h√†ng</p>
                      </div>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <p>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c x√°c nh·∫≠n</p>
                      </div>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <p>Thanh to√°n khi nh·∫≠n h√†ng t·∫°i ƒë·ªãa ch·ªâ ƒë√£ cung c·∫•p</p>
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                        <p>Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng</p>
                      </div>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n t·ª´ c·ª≠a h√†ng</p>
                      </div>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <p>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c x√°c nh·∫≠n v√† giao h√†ng</p>
                      </div>
                    </>
                  )}
                  <div className="flex items-start space-x-2">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p>Th·ªùi gian giao h√†ng d·ª± ki·∫øn: <strong>2-3 ng√†y l√†m vi·ªác</strong></p>
                  </div>
                  <div className="flex items-start space-x-2">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <p>B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng trong trang <strong>Profile</strong></p>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="text-center space-y-4">
                <button
                  onClick={() => navigate("/profile?tab=orders")}
                  className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white py-4 px-10 rounded-xl font-semibold transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 mr-4"
                >
                  Xem ƒë∆°n h√†ng
                </button>
                <button
                  onClick={() => navigate("/")}
                  className="bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white py-4 px-10 rounded-xl font-semibold transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
                >
                  <FaHome className="w-4 h-4 inline mr-2" />
                  V·ªÅ trang ch·ªß
                </button>
              </div>
            </div>

            {/* Sidebar - Right Column */}
            <div className="lg:col-span-1">
              <div className="sticky top-8 space-y-6">
                {/* Order Summary Card */}
                <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                    T√≥m t·∫Øt ƒë∆°n h√†ng
                  </h3>
                  
                  {orderDetails && (
                    <div className="space-y-4">
                      {/* Order Status */}
                      <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium text-green-800">Tr·∫°ng th√°i</span>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            getOrderStatus(orderDetails.status).color === 'text-green-600' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-blue-100 text-blue-800'
                          }`}>
                            {getOrderStatus(orderDetails.status).text}
                          </span>
                        </div>
                      </div>

                      {/* Payment Status */}
                      <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium text-blue-800">Thanh to√°n</span>
                          <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            {getPaymentStatus(orderDetails)}
                          </span>
                        </div>
                      </div>

                      {/* Total Amount */}
                      <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200">
                        <div className="text-center">
                          <p className="text-sm text-gray-600 mb-1">T·ªïng ti·ªÅn</p>
                          <p className="text-2xl font-bold text-green-600">
                            {formatPrice(orderDetails.totalPrice)}
                          </p>
                        </div>
                      </div>

                      {/* Quick Actions */}
                      <div className="space-y-2">
                        <button
                          onClick={() => navigate("/profile?tab=orders")}
                          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition-colors text-sm"
                        >
                          Xem chi ti·∫øt ƒë∆°n h√†ng
                        </button>
                        <button
                          onClick={() => navigate("/")}
                          className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded-lg font-medium transition-colors text-sm"
                        >
                          Ti·∫øp t·ª•c mua s·∫Øm
                        </button>
                      </div>
                    </div>
                  )}
                </div>

                {/* Customer Support Card */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                  <h3 className="text-lg font-semibold text-blue-900 mb-4">
                    C·∫ßn h·ªó tr·ª£?
                  </h3>
                  <div className="space-y-3 text-sm text-blue-800">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span>Hotline: <strong>+84 123 456 789</strong></span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span>Email: <strong>support@techtrend.vn</strong></span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span>H·ªó tr·ª£ 24/7</span>
                    </div>
                  </div>
                </div>

                {/* Delivery Info Card */}
                <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <FaTruck className="w-5 h-5 mr-2 text-blue-600" />
                    Th√¥ng tin giao h√†ng
                  </h3>
                  {orderDetails && (
                    <div className="space-y-3 text-sm text-gray-600">
                      <div>
                        <p className="font-medium text-gray-900">{orderDetails.shippingAddress.fullName}</p>
                        <p>{orderDetails.shippingAddress.phone}</p>
                      </div>
                      <div className="p-3 bg-gray-50 rounded-lg">
                        <p className="text-gray-700">
                          {orderDetails.shippingAddress.address}
                        </p>
                        <p className="text-gray-700">
                          {orderDetails.shippingAddress.city}
                        </p>
                      </div>
                      <div className="text-center p-2 bg-green-50 rounded-lg border border-green-200">
                        <p className="text-green-800 font-medium">D·ª± ki·∫øn: 2-3 ng√†y</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
        
      {/* Payment Status Modal */}
      <PaymentStatusModal
        isOpen={showPaymentModal}
        status={paymentStatus}
        title={
          paymentStatus === 'processing' ? 'ƒêang ki·ªÉm tra thanh to√°n...' :
          paymentStatus === 'success' ? 'Thanh to√°n th√†nh c√¥ng!' :
          paymentStatus === 'failed' ? 'Thanh to√°n th·∫•t b·∫°i' :
          'Kh√¥ng th·ªÉ x√°c nh·∫≠n thanh to√°n'
        }
        message={
          paymentStatus === 'processing' ? 'Vui l√≤ng ƒë·ª£i trong khi ch√∫ng t√¥i x√°c nh·∫≠n tr·∫°ng th√°i thanh to√°n c·ªßa b·∫°n.' :
          paymentStatus === 'success' ? 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng. ƒê∆°n h√†ng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.' :
          paymentStatus === 'failed' ? 'Giao d·ªãch kh√¥ng th√†nh c√¥ng. ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c h·ªßy v√† b·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i.' :
          'Kh√¥ng th·ªÉ x√°c nh·∫≠n tr·∫°ng th√°i thanh to√°n. ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c h·ªßy ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n.'
        }
        onClose={() => setShowPaymentModal(false)}
      />
      
      {/* Cart Update Notification */}
      <CartUpdateNotification
        isVisible={showCartNotification}
        onClose={() => setShowCartNotification(false)}
      />
      
      
    </div>
  );
};

export default CheckoutSuccess;
