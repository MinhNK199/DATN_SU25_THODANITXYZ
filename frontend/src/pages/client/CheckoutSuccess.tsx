import React, { useEffect, useState } from "react";
import { useSearchParams, useNavigate, useLocation } from "react-router-dom";
import { FaCheckCircle, FaTruck, FaHome } from "react-icons/fa";
import { useToast } from "../../components/client/ToastContainer";
import axios from "axios";

const CheckoutSuccess: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const location = useLocation();
  const { showSuccess, showError } = useToast();
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  const orderId = searchParams.get("orderId");
  const paymentMethod = searchParams.get("paymentMethod");
  const status = searchParams.get("status"); // T·ª´ ZaloPay

  useEffect(() => {
    console.log("CheckoutSuccess mounted with:", {
      orderId,
      paymentMethod,
      status,
    });

    if (!orderId) {
      console.log("Kh√¥ng c√≥ orderId, chuy·ªÉn v·ªÅ trang ch·ªß");
      navigate("/");
      return;
    }

    // ‚úÖ S·ª¨A: KI·ªÇM TRA TR·∫†NG TH√ÅI TH·ª∞C T·∫æ T·ª™ DATABASE
    const handlePaymentResult = async () => {
      try {
        const token = localStorage.getItem("token");

        // X·ª≠ l√Ω theo ph∆∞∆°ng th·ª©c thanh to√°n
        if (paymentMethod === "zalopay") {
  if (status === "1") {
    // ‚úÖ Thanh to√°n ZaloPay th√†nh c√¥ng t·ª´ URL
    console.log("üîî ZaloPay payment success from URL");

    showSuccess(
      "Thanh to√°n ZaloPay th√†nh c√¥ng!",
      `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
    );

    // X√≥a s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
    const pendingOrder = localStorage.getItem("pendingOrder");
    if (pendingOrder) {
      const orderData = JSON.parse(pendingOrder);
      if (orderData.orderItems) {
        await removeOrderedItemsFromCart(orderData.orderItems);
      }
      localStorage.removeItem("pendingOrder");
    }

    // ‚úÖ S·ª¨A: ƒê·ª£i callback r·ªìi fetch data m·ªôt l·∫ßn
    setTimeout(async () => {
      await fetchOrderDetails();
    }, 3000); // ƒê·ª£i 3 gi√¢y cho callback x·ª≠ l√Ω
    
  } else {
         // ‚ùå Thanh to√°n ZaloPay th·∫•t b·∫°i
     await axios.delete(`/api/order/${orderId}`, {
       headers: { Authorization: `Bearer ${token}` },
     });
    showError("Thanh to√°n ZaloPay th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
    navigate("/checkout?error=payment_cancelled");
    return;
  }
}else if (paymentMethod === "momo") {
          // Ki·ªÉm tra t·ª´ URL parameters
          const resultCode = searchParams.get("resultCode");
          if (resultCode === "0") {
            // ‚úÖ Thanh to√°n Momo th√†nh c√¥ng
            showSuccess(
              "Thanh to√°n Momo th√†nh c√¥ng!",
              `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
            );

            const pendingOrder = localStorage.getItem("pendingOrder");
            if (pendingOrder) {
              const orderData = JSON.parse(pendingOrder);
              if (orderData.orderItems) {
                await removeOrderedItemsFromCart(orderData.orderItems);
              }
              localStorage.removeItem("pendingOrder");
            }
            await fetchOrderDetails();
          } else {
                         // ‚ùå Thanh to√°n Momo th·∫•t b·∫°i
             await axios.delete(`/api/order/${orderId}`, {
               headers: { Authorization: `Bearer ${token}` },
             });
            showError("Thanh to√°n Momo th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
            navigate("/checkout?error=payment_cancelled");
            return;
          }
        } else if (paymentMethod === "vnpay") {
          const vnp_ResponseCode = searchParams.get("vnp_ResponseCode");
          if (vnp_ResponseCode === "00") {
            // ‚úÖ Thanh to√°n VNPAY th√†nh c√¥ng
            showSuccess(
              "Thanh to√°n VNPAY th√†nh c√¥ng!",
              `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
            );

            const pendingOrder = localStorage.getItem("pendingOrder");
            if (pendingOrder) {
              const orderData = JSON.parse(pendingOrder);
              if (orderData.orderItems) {
                await removeOrderedItemsFromCart(orderData.orderItems);
              }
              localStorage.removeItem("pendingOrder");
            }
            await fetchOrderDetails();
          } else {
                         // ‚ùå Thanh to√°n VNPAY th·∫•t b·∫°i
             await axios.delete(`/api/order/${orderId}`, {
               headers: { Authorization: `Bearer ${token}` },
             });
            showError("Thanh to√°n VNPAY th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
            navigate("/checkout?error=payment_cancelled");
            return;
          }
        } else if (paymentMethod === "COD") {
          // COD - Hi·ªÉn th·ªã th√†nh c√¥ng ngay
          showSuccess(
            "ƒê·∫∑t h√†ng COD th√†nh c√¥ng!",
            `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
          );
          await fetchOrderDetails();
        } else {
          // ‚úÖ Ph∆∞∆°ng th·ª©c kh√°c - l·∫•y th√¥ng tin ƒë∆°n h√†ng
          await fetchOrderDetails();
        }
      } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n:", error);
        showError("C√≥ l·ªói x·∫£y ra", "Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆°n h√†ng");
        navigate("/checkout?error=payment_error");
      }
    };

    handlePaymentResult();
  }, [
    orderId,
    paymentMethod,
    status,
    searchParams,
    navigate,
    showSuccess,
    showError,
  ]);

  // ‚úÖ Force refresh profile data khi order ƒë∆∞·ª£c c·∫≠p nh·∫≠t
  useEffect(() => {
    if (orderDetails && orderDetails.isPaid && orderDetails.paymentStatus === "paid") {
      // G·ª≠i event ƒë·ªÉ profile component refresh
      window.dispatchEvent(new CustomEvent('orderUpdated'));
      console.log("üîî Dispatched orderUpdated event for profile refresh");
    }
  }, [orderDetails]);

  // ‚úÖ H√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeOrderedItemsFromCart = async (orderItems: any[]) => {
    try {
      const token = localStorage.getItem("token");
      const productIds = orderItems.map((item) => item.product);

             await axios.post(
         `/api/cart/remove-multiple`,
         { productIds },
         { headers: { Authorization: `Bearer ${token}` } }
       );

      console.log("‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng sau thanh to√°n th√†nh c√¥ng");
    } catch (error) {
      console.error("L·ªói x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", error);
    }
  };

  // ‚úÖ L·∫•y th√¥ng tin ƒë∆°n h√†ng
  const fetchOrderDetails = async () => {
    try {
      const token = localStorage.getItem("token");
      console.log("üîÑ Fetching order details for:", orderId);

             const response = await axios.get(
         `/api/order/${orderId}`,
         {
           headers: { Authorization: `Bearer ${token}` },
         }
       );

      console.log("üì¶ Order details received:", {
        id: response.data._id,
        status: response.data.status,
        paymentMethod: response.data.paymentMethod,
        isPaid: response.data.isPaid,
        paymentStatus: response.data.paymentStatus,
        paidAt: response.data.paidAt,
      });

      setOrderDetails(response.data);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ƒë∆°n h√†ng:", error);

      // N·∫øu l√† 404, c√≥ th·ªÉ ƒë∆°n h√†ng ƒë√£ b·ªã x√≥a do thanh to√°n th·∫•t b·∫°i
      if (error.response?.status === 404) {
        showError(
          "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i",
          "C√≥ th·ªÉ ƒë√£ b·ªã h·ªßy do thanh to√°n th·∫•t b·∫°i"
        );
        navigate("/");
      }
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ H√†m format gi√° ti·ªÅn
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat("vi-VN").format(price) + " ƒë";
  };

  // ‚úÖ H√†m hi·ªÉn th·ªã t√™n ph∆∞∆°ng th·ª©c thanh to√°n
    const getPaymentMethodDisplay = () => {
    switch (paymentMethod) {
      case "COD":
        return "Thanh to√°n khi nh·∫≠n h√†ng (COD)";
      case "zalopay":
        return "ZaloPay";
      case "momo":
        return "Momo";
      case "vnpay":
        return "VNPAY";
      case "credit-card":
        return "Th·∫ª t√≠n d·ª•ng";
      default:
        return paymentMethod || "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // ‚úÖ H√†m hi·ªÉn th·ªã tr·∫°ng th√°i ƒë∆°n h√†ng
  const getOrderStatus = (status: string) => {
    const statusMap: { [key: string]: { text: string; color: string } } = {
      draft: { text: "ƒêang t·∫°o", color: "text-gray-500" },
      pending: { text: "Ch·ªù x√°c nh·∫≠n", color: "text-yellow-600" },
      confirmed: { text: "ƒê√£ x√°c nh·∫≠n", color: "text-blue-600" },
      processing: { text: "ƒêang x·ª≠ l√Ω", color: "text-purple-600" },
      shipped: { text: "ƒêang giao", color: "text-orange-600" },
      delivered_success: { text: "Giao th√†nh c√¥ng", color: "text-green-600" },
      delivered_failed: { text: "Giao th·∫•t b·∫°i", color: "text-red-600" },
      completed: { text: "Ho√†n th√†nh", color: "text-green-600" },
      cancelled: { text: "ƒê√£ h·ªßy", color: "text-red-600" },
      refund_requested: { text: "Y√™u c·∫ßu ho√†n ti·ªÅn", color: "text-orange-600" },
      refunded: { text: "ƒê√£ ho√†n ti·ªÅn", color: "text-gray-600" },
      payment_failed: { text: "Thanh to√°n th·∫•t b·∫°i", color: "text-red-600" },
    };

    return (
      statusMap[status] || { text: "Kh√¥ng x√°c ƒë·ªãnh", color: "text-gray-500" }
    );
  };

  // ‚úÖ H√†m hi·ªÉn th·ªã tr·∫°ng th√°i thanh to√°n
  const getPaymentStatus = (order: any) => {
    if (order.paymentMethod === "COD") {
      return order.isPaid ? "ƒê√£ thanh to√°n COD" : "Ch∆∞a thanh to√°n COD";
    } else {
      if (order.isPaid && order.paymentStatus === "paid") {
        return `ƒê√£ thanh to√°n ${getPaymentMethodDisplay()}`;
      } else if (order.paymentStatus === "failed") {
        return "Thanh to√°n th·∫•t b·∫°i";
      } else if (order.paymentStatus === "awaiting_payment") {
        return "ƒêang x·ª≠ l√Ω thanh to√°n";
      } else {
        return "Ch∆∞a thanh to√°n";
      }
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">
            {paymentMethod === "zalopay" && status === "1"
              ? "ƒêang x·ª≠ l√Ω thanh to√°n ZaloPay..."
              : "ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng..."}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <div className="max-w-2xl mx-auto">
          {/* Success Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 mx-auto mb-4 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center">
              <FaCheckCircle className="w-12 h-12 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              ƒê·∫∑t h√†ng th√†nh c√¥ng!
            </h1>
            <p className="text-gray-600">
              {["zalopay", "momo", "vnpay", "credit-card"].includes(
                paymentMethod || ""
              )
                ? `Thanh to√°n ${getPaymentMethodDisplay()} ƒë√£ ho√†n t·∫•t`
                : "C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i TechTrend"}
            </p>
          </div>

          {/* Order Details */}
          {orderDetails && (
            <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
              <div className="border-b border-gray-200 pb-4 mb-4">
                <h2 className="text-xl font-semibold text-gray-900">
                  Th√¥ng tin ƒë∆°n h√†ng
                </h2>
                <p className="text-gray-600">
                  M√£ ƒë∆°n h√†ng: #{orderDetails._id}
                </p>
              </div>

              <div className="space-y-4">
                {/* Th√¥ng tin c∆° b·∫£n */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Ph∆∞∆°ng th·ª©c thanh to√°n
                    </label>
                    <p className="text-gray-900">{getPaymentMethodDisplay()}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Tr·∫°ng th√°i ƒë∆°n h√†ng
                    </label>
                    <p
                      className={`font-medium ${
                        getOrderStatus(orderDetails.status).color
                      }`}
                    >
                      {getOrderStatus(orderDetails.status).text}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Tr·∫°ng th√°i thanh to√°n
                    </label>
                    <p className="text-gray-900">
                      {getPaymentStatus(orderDetails)}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      T·ªïng ti·ªÅn
                    </label>
                    <p className="text-lg font-semibold text-green-600">
                      {formatPrice(orderDetails.totalPrice)}
                    </p>
                  </div>
                </div>

                {/* ƒê·ªãa ch·ªâ giao h√†ng */}
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    ƒê·ªãa ch·ªâ giao h√†ng
                  </label>
                  <div className="mt-1 text-gray-900">
                    <p>{orderDetails.shippingAddress.fullName}</p>
                    <p>{orderDetails.shippingAddress.phone}</p>
                    <p>
                      {orderDetails.shippingAddress.address},{" "}
                      {orderDetails.shippingAddress.city}
                    </p>
                  </div>
                </div>

                {/* S·∫£n ph·∫©m */}
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    S·∫£n ph·∫©m ({orderDetails.orderItems.length} m√≥n)
                  </label>
                  <div className="mt-2 space-y-3">
                    {orderDetails.orderItems.map((item: any, index: number) => (
                      <div
                        key={index}
                        className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg"
                      >
                        <img
                          src={item.image}
                          alt={item.name}
                          className="w-12 h-12 object-cover rounded"
                        />
                        <div className="flex-1">
                          <p className="font-medium text-gray-900">
                            {item.name}
                          </p>
                          <p className="text-sm text-gray-600">
                            S·ªë l∆∞·ª£ng: {item.quantity} √ó{" "}
                            {formatPrice(item.price)}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium text-gray-900">
                            {formatPrice(item.quantity * item.price)}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* T·ªïng c·ªông */}
                <div className="border-t border-gray-200 pt-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">T·∫°m t√≠nh:</span>
                      <span>{formatPrice(orderDetails.itemsPrice)}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">Ph√≠ v·∫≠n chuy·ªÉn:</span>
                      <span>{formatPrice(orderDetails.shippingPrice)}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">Thu·∫ø:</span>
                      <span>{formatPrice(orderDetails.taxPrice)}</span>
                    </div>
                    <div className="flex justify-between text-lg font-semibold border-t pt-2">
                      <span>T·ªïng c·ªông:</span>
                      <span className="text-green-600">
                        {formatPrice(orderDetails.totalPrice)}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Next Steps */}
          <div className="bg-blue-50 rounded-2xl p-6 mb-6">
            <h3 className="text-lg font-semibold text-blue-900 mb-3 flex items-center">
              <FaTruck className="w-5 h-5 mr-2" />
              B∆∞·ªõc ti·∫øp theo
            </h3>
            <div className="space-y-2 text-blue-800">
              {orderDetails?.paymentMethod === "COD" ? (
                <>
                  <p>‚Ä¢ ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n t·ª´ c·ª≠a h√†ng</p>
                  <p>‚Ä¢ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c x√°c nh·∫≠n</p>
                  <p>‚Ä¢ Thanh to√°n khi nh·∫≠n h√†ng t·∫°i ƒë·ªãa ch·ªâ ƒë√£ cung c·∫•p</p>
                </>
              ) : (
                <>
                  <p>‚Ä¢ Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng</p>
                  <p>‚Ä¢ ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n t·ª´ c·ª≠a h√†ng</p>
                  <p>
                    ‚Ä¢ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c x√°c nh·∫≠n v√†
                    giao h√†ng
                  </p>
                </>
              )}
              <p>‚Ä¢ Th·ªùi gian giao h√†ng d·ª± ki·∫øn: 2-3 ng√†y l√†m vi·ªác</p>
              <p>‚Ä¢ B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng trong trang Profile</p>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="text-center space-y-4">
            <button
              onClick={() => navigate("/profile?tab=orders")}
              className="bg-blue-600 hover:bg-blue-700 text-white py-3 px-8 rounded-lg font-semibold transition-colors mr-4"
            >
              Xem ƒë∆°n h√†ng
            </button>
            <button
              onClick={() => navigate("/")}
              className="bg-gray-600 hover:bg-gray-700 text-white py-3 px-8 rounded-lg font-semibold transition-colors"
            >
              <FaHome className="w-4 h-4 inline mr-2" />
              V·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutSuccess;