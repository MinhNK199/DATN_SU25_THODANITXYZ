import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { CheckCircle, Package, Truck, Clock, AlertCircle } from 'lucide-react';
import { useToast } from '../../components/client/ToastContainer';
import { useCart } from '../../contexts/CartContext';
import axiosInstance from '../../api/axiosInstance';

interface OrderDetails {
  _id: string;
  orderItems: Array<{
    name: string;
    quantity: number;
    price: number;
    image: string;
  }>;
  totalPrice: number;
  status: string;
  paymentMethod: string;
  paymentStatus: string;
  isPaid: boolean;
  shippingAddress: {
    fullName: string;
    address: string;
    city: string;
    phone: string;
  };
  createdAt: string;
}

const CheckoutSuccess: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { showSuccess, showError } = useToast();
  const { removeOrderedItemsFromCart } = useCart();
  
  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const orderId = searchParams.get('orderId');
  const paymentMethod = searchParams.get('paymentMethod');
  const status = searchParams.get('status');
  const resultCode = searchParams.get('resultCode');

  useEffect(() => {
    if (!orderId) {
      setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng');
      setLoading(false);
      return;
    }

    handlePaymentSuccess();
  }, [orderId]);

  const handlePaymentSuccess = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin ƒë∆°n h√†ng');
        setLoading(false);
        return;
      }

      // X·ª≠ l√Ω theo ph∆∞∆°ng th·ª©c thanh to√°n
      if (paymentMethod === "momo") {
        // Ki·ªÉm tra t·ª´ URL parameters
        if (resultCode === "0") {
          // ‚úÖ Thanh to√°n Momo th√†nh c√¥ng
          showSuccess(
            "Thanh to√°n Momo th√†nh c√¥ng!",
            `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
          );

          // ‚úÖ X√≥a s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
          const pendingOrder = localStorage.getItem("pendingOrder");
          if (pendingOrder) {
            const orderData = JSON.parse(pendingOrder);
            if (orderData.orderItems) {
              await removeOrderedItemsFromCart(orderData.orderItems);
            }
            localStorage.removeItem("pendingOrder");
          }

          // ‚úÖ ƒê·ª£i callback r·ªìi fetch data m·ªôt l·∫ßn
          setTimeout(async () => {
            await fetchOrderDetails();
          }, 2000); // ƒê·ª£i 2 gi√¢y cho callback x·ª≠ l√Ω

        } else {
          // ‚ùå Thanh to√°n Momo th·∫•t b·∫°i
          await axios.delete(`/api/order/${orderId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          showError("Thanh to√°n Momo th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
          navigate("/checkout?error=payment_cancelled");
          return;
        }
      } else if (paymentMethod === "vnpay") {
        // Ki·ªÉm tra t·ª´ URL parameters
        const vnp_ResponseCode = searchParams.get("vnp_ResponseCode");
        if (vnp_ResponseCode === "00") {
          // ‚úÖ Thanh to√°n VNPay th√†nh c√¥ng
          showSuccess(
            "Thanh to√°n VNPay th√†nh c√¥ng!",
            `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
          );

          // ‚úÖ X√≥a s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
          const pendingOrder = localStorage.getItem("pendingOrder");
          if (pendingOrder) {
            const orderData = JSON.parse(pendingOrder);
            if (orderData.orderItems) {
              await removeOrderedItemsFromCart(orderData.orderItems);
            }
            localStorage.removeItem("pendingOrder");
          }

          // ‚úÖ ƒê·ª£i callback r·ªìi fetch data m·ªôt l·∫ßn
          setTimeout(async () => {
            await fetchOrderDetails();
          }, 2000); // ƒê·ª£i 2 gi√¢y cho callback x·ª≠ l√Ω

        } else {
          // ‚ùå Thanh to√°n VNPay th·∫•t b·∫°i
          await axios.delete(`/api/order/${orderId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          showError("Thanh to√°n VNPay th·∫•t b·∫°i", "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy");
          navigate("/checkout?error=payment_cancelled");
          return;
        }
      } else if (paymentMethod === "credit-card") {
        // ‚úÖ Thanh to√°n Credit Card th√†nh c√¥ng
        showSuccess(
          "Thanh to√°n th·∫ª t√≠n d·ª•ng th√†nh c√¥ng!",
          `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y.`
        );

        // ‚úÖ X√≥a s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t kh·ªèi gi·ªè h√†ng
        const pendingOrder = localStorage.getItem("pendingOrder");
        if (pendingOrder) {
          const orderData = JSON.parse(pendingOrder);
          if (orderData.orderItems) {
            await removeOrderedItemsFromCart(orderData.orderItems);
          }
          localStorage.removeItem("pendingOrder");
        }

        // ‚úÖ Fetch order details ngay l·∫≠p t·ª©c
        await fetchOrderDetails();
      } else {
        // COD ho·∫∑c ph∆∞∆°ng th·ª©c kh√°c
        showSuccess(
          "ƒê·∫∑t h√†ng th√†nh c√¥ng!",
          `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c t·∫°o v√† s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t.`
        );
        await fetchOrderDetails();
      }

    } catch (error) {
      console.error('Error handling payment success:', error);
      setError('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n');
      setLoading(false);
    }
  };

  const fetchOrderDetails = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token || !orderId) return;

      const response = await axiosInstance.get(`/order/${orderId}`);

      setOrderDetails(response.data);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching order details:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng');
      setLoading(false);
    }
  };

  const getPaymentMethodIcon = (method: string) => {
    switch (method?.toLowerCase()) {
      case 'momo':
        return 'üíú';
      case 'vnpay':
        return 'üü¢';
      case 'credit-card':
        return 'üí≥';
      case 'cod':
        return 'üí∞';
      default:
        return 'üí≥';
    }
  };

  const getPaymentMethodName = (method: string) => {
    switch (method?.toLowerCase()) {
      case 'momo':
        return 'MoMo';
      case 'vnpay':
        return 'VNPay';
      case 'credit-card':
        return 'Th·∫ª t√≠n d·ª•ng';
      case 'cod':
        return 'Thanh to√°n khi nh·∫≠n h√†ng (COD)';
      default:
        return method || 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">ƒêang x·ª≠ l√Ω thanh to√°n...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto" />
          <h2 className="mt-4 text-xl font-semibold text-gray-900">C√≥ l·ªói x·∫£y ra</h2>
          <p className="mt-2 text-gray-600">{error}</p>
          <button
            onClick={() => navigate('/')}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Thanh to√°n th√†nh c√¥ng!
          </h1>
          <p className="text-lg text-gray-600">
            C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.
          </p>
        </div>

        {/* Order Summary */}
        {orderDetails && (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-4">Th√¥ng tin ƒë∆°n h√†ng</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Order Details */}
              <div>
                <h3 className="font-medium text-gray-900 mb-3">Chi ti·∫øt ƒë∆°n h√†ng</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                    <span className="font-medium">#{orderDetails._id.slice(-8)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ng√†y ƒë·∫∑t:</span>
                    <span>{new Date(orderDetails.createdAt).toLocaleDateString('vi-VN')}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
                    <span className="flex items-center">
                      <span className="mr-2">{getPaymentMethodIcon(orderDetails.paymentMethod)}</span>
                      {getPaymentMethodName(orderDetails.paymentMethod)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                    <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                      {orderDetails.isPaid ? 'ƒê√£ thanh to√°n' : 'Ch·ªù thanh to√°n'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">T·ªïng ti·ªÅn:</span>
                    <span className="font-bold text-lg text-green-600">
                      {orderDetails.totalPrice?.toLocaleString('vi-VN')}ƒë
                    </span>
                  </div>
                </div>
              </div>

              {/* Shipping Address */}
              <div>
                <h3 className="font-medium text-gray-900 mb-3">ƒê·ªãa ch·ªâ giao h√†ng</h3>
                <div className="text-sm text-gray-600 space-y-1">
                  <p className="font-medium">{orderDetails.shippingAddress.fullName}</p>
                  <p>{orderDetails.shippingAddress.address}</p>
                  <p>{orderDetails.shippingAddress.city}</p>
                  <p>ƒêi·ªán tho·∫°i: {orderDetails.shippingAddress.phone}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Order Items */}
        {orderDetails && (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-4">S·∫£n ph·∫©m ƒë√£ ƒë·∫∑t</h2>
            <div className="space-y-4">
              {orderDetails.orderItems.map((item, index) => (
                <div key={index} className="flex items-center space-x-4 p-4 border rounded-lg">
                  <img
                    src={item.image}
                    alt={item.name}
                    className="w-16 h-16 object-cover rounded-lg"
                  />
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900">{item.name}</h3>
                    <p className="text-sm text-gray-600">S·ªë l∆∞·ª£ng: {item.quantity}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900">
                      {(item.price * item.quantity).toLocaleString('vi-VN')}ƒë
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Next Steps */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">C√°c b∆∞·ªõc ti·∫øp theo</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="bg-blue-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center">
                <Package className="h-6 w-6 text-blue-600" />
              </div>
              <h3 className="font-medium text-gray-900 mb-2">ƒê∆°n h√†ng ƒë∆∞·ª£c x√°c nh·∫≠n</h3>
              <p className="text-sm text-gray-600">
                ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã.
              </p>
            </div>
            <div className="text-center">
              <div className="bg-yellow-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center">
                <Truck className="h-6 w-6 text-yellow-600" />
              </div>
              <h3 className="font-medium text-gray-900 mb-2">Giao h√†ng</h3>
              <p className="text-sm text-gray-600">
                ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y l√†m vi·ªác.
              </p>
            </div>
            <div className="text-center">
              <div className="bg-green-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center">
                <CheckCircle className="h-6 w-6 text-green-600" />
              </div>
              <h3 className="font-medium text-gray-900 mb-2">Nh·∫≠n h√†ng</h3>
              <p className="text-sm text-gray-600">
                Ki·ªÉm tra v√† nh·∫≠n h√†ng khi shipper giao ƒë·∫øn.
              </p>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={() => navigate('/profile/orders')}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Xem ƒë∆°n h√†ng c·ªßa t√¥i
          </button>
          <button
            onClick={() => navigate('/')}
            className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            Ti·∫øp t·ª•c mua s·∫Øm
          </button>
        </div>

        {/* Contact Info */}
        <div className="mt-8 text-center text-sm text-gray-600">
          <p>
            N·∫øu b·∫°n c√≥ c√¢u h·ªèi, vui l√≤ng li√™n h·ªá ch√∫ng t√¥i qua email{' '}
            <a href="mailto:support@techtrend.com" className="text-blue-600 hover:underline">
              support@techtrend.com
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default CheckoutSuccess;
