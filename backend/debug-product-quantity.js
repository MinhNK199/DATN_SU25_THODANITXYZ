// Debug script ƒë·ªÉ ki·ªÉm tra l·ªói API total-product-quantity-by-name
import mongoose from 'mongoose';
import Product from './src/models/Product.js';
import dotenv from 'dotenv';

dotenv.config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    process.exit(1);
  }
};

const debugProductQuantity = async () => {
  console.log('üîç Debugging Product Quantity API...\n');

  try {
    // Test 1: Ki·ªÉm tra k·∫øt n·ªëi database
    console.log('1Ô∏è‚É£ Testing database connection...');
    await connectDB();

    // Test 2: Ki·ªÉm tra Product model
    console.log('\n2Ô∏è‚É£ Testing Product model...');
    const productCount = await Product.countDocuments();
    console.log(`   Total products: ${productCount}`);

    // Test 3: Ki·ªÉm tra field stock
    console.log('\n3Ô∏è‚É£ Testing stock field...');
    const sampleProduct = await Product.findOne().select('name stock isActive');
    console.log('   Sample product:', sampleProduct);

    // Test 4: Ki·ªÉm tra aggregation query
    console.log('\n4Ô∏è‚É£ Testing aggregation query...');
    const result = await Product.aggregate([
      { $match: { isActive: true } },
      { $group: { _id: null, totalQuantity: { $sum: '$stock' } } }
    ]);
    console.log('   Aggregation result:', result);

    // Test 5: Ki·ªÉm tra products c√≥ isActive = true
    console.log('\n5Ô∏è‚É£ Testing active products...');
    const activeProducts = await Product.find({ isActive: true }).select('name stock isActive').limit(5);
    console.log('   Active products sample:', activeProducts);

    // Test 6: Ki·ªÉm tra products c√≥ stock > 0
    console.log('\n6Ô∏è‚É£ Testing products with stock...');
    const productsWithStock = await Product.find({ 
      isActive: true, 
      stock: { $gt: 0 } 
    }).select('name stock isActive').limit(5);
    console.log('   Products with stock sample:', productsWithStock);

    // Test 7: Ki·ªÉm tra t·ªïng stock th·ª±c t·∫ø
    console.log('\n7Ô∏è‚É£ Testing total stock calculation...');
    const totalStock = await Product.aggregate([
      { $match: { isActive: true } },
      { $group: { _id: null, totalQuantity: { $sum: '$stock' } } }
    ]);
    
    const totalProductQuantityByName = totalStock.length > 0 ? totalStock[0].totalQuantity : 0;
    console.log('   Total quantity:', totalProductQuantityByName);

    console.log('\n‚úÖ Debug completed successfully!');

  } catch (error) {
    console.error('\n‚ùå Debug error:', error);
    console.error('   Error message:', error.message);
    console.error('   Error stack:', error.stack);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Disconnected from MongoDB');
  }
};

// Ch·∫°y debug
debugProductQuantity().catch(console.error);
