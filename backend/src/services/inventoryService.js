import Product from "../models/Product.js";
import ProductReservation from "../models/ProductReservation.js";

/**
 * Service qu·∫£n l√Ω kho h√†ng - x·ª≠ l√Ω tr·ª´ v√† ho√†n tr·∫£ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
 * ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu v√† tr√°nh tr√πng l·∫∑p c·∫≠p nh·∫≠t kho
 */
class InventoryService {
    /**
     * Tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh·ªèi kho khi ƒë·∫∑t h√†ng
     * @param {Array} orderItems - Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng
     * @param {string} orderId - ID c·ªßa ƒë∆°n h√†ng
     * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t kho
     */
    static async deductInventory(orderItems, orderId) {
        const results = {
            success: true,
            updatedProducts: [],
            errors: []
        };

        try {
            console.log(`üì¶ B·∫Øt ƒë·∫ßu tr·ª´ kho cho ƒë∆°n h√†ng ${orderId}`);

            for (const item of orderItems) {
                try {
                    const { product: productId, quantity, variantId } = item;

                    // T√¨m s·∫£n ph·∫©m
                    const product = await Product.findById(productId);
                    if (!product) {
                        results.errors.push({
                            productId,
                            error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"
                        });
                        continue;
                    }

                    // X·ª≠ l√Ω tr·ª´ kho cho s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ
                    if (variantId) {
                        const variant = product.variants.find(v => v._id.toString() === variantId.toString());
                        if (!variant) {
                            results.errors.push({
                                productId,
                                variantId,
                                error: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m"
                            });
                            continue;
                        }

                        // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa bi·∫øn th·ªÉ
                        if (variant.stock < quantity) {
                            results.errors.push({
                                productId,
                                variantId,
                                error: `Kh√¥ng ƒë·ªß h√†ng trong kho. C√≤n l·∫°i: ${variant.stock}, y√™u c·∫ßu: ${quantity}`
                            });
                            continue;
                        }

                        // Tr·ª´ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ
                        variant.stock -= quantity;
                        console.log(`üì¶ Tr·ª´ ${quantity} s·∫£n ph·∫©m t·ª´ bi·∫øn th·ªÉ ${variant.name} (${variantId})`);

                    } else {
                        // X·ª≠ l√Ω tr·ª´ kho cho s·∫£n ph·∫©m kh√¥ng c√≥ bi·∫øn th·ªÉ
                        if (product.stock < quantity) {
                            results.errors.push({
                                productId,
                                error: `Kh√¥ng ƒë·ªß h√†ng trong kho. C√≤n l·∫°i: ${product.stock}, y√™u c·∫ßu: ${quantity}`
                            });
                            continue;
                        }

                        // Tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ch√≠nh
                        product.stock -= quantity;
                        console.log(`üì¶ Tr·ª´ ${quantity} s·∫£n ph·∫©m t·ª´ ${product.name}`);
                    }

                    // L∆∞u s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
                    await product.save();

                    results.updatedProducts.push({
                        productId,
                        variantId: variantId || null,
                        quantity,
                        remainingStock: variantId ?
                            product.variants.find(v => v._id.toString() === variantId.toString())?.stock :
                            product.stock
                    });

                } catch (itemError) {
                    console.error(`‚ùå L·ªói khi tr·ª´ kho cho s·∫£n ph·∫©m ${item.product}:`, itemError);
                    results.errors.push({
                        productId: item.product,
                        error: itemError.message
                    });
                }
            }

            // N·∫øu c√≥ l·ªói, ƒë√°nh d·∫•u k·∫øt qu·∫£ l√† th·∫•t b·∫°i
            if (results.errors.length > 0) {
                results.success = false;
                console.error(`‚ùå C√≥ ${results.errors.length} l·ªói khi tr·ª´ kho cho ƒë∆°n h√†ng ${orderId}`);
            } else {
                console.log(`‚úÖ Tr·ª´ kho th√†nh c√¥ng cho ƒë∆°n h√†ng ${orderId}`);
            }

            return results;

        } catch (error) {
            console.error(`‚ùå L·ªói nghi√™m tr·ªçng khi tr·ª´ kho cho ƒë∆°n h√†ng ${orderId}:`, error);
            return {
                success: false,
                updatedProducts: [],
                errors: [{ error: error.message }]
            };
        }
    }

    /**
     * Ho√†n tr·∫£ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√†o kho khi h·ªßy ƒë∆°n h√†ng
     * @param {Array} orderItems - Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng b·ªã h·ªßy
     * @param {string} orderId - ID c·ªßa ƒë∆°n h√†ng
     * @param {boolean} alreadyRestored - ƒê√°nh d·∫•u ƒë√£ ho√†n tr·∫£ ƒë·ªÉ tr√°nh tr√πng l·∫∑p
     * @returns {Promise<Object>} K·∫øt qu·∫£ ho√†n tr·∫£ kho
     */
    static async restoreInventory(orderItems, orderId, alreadyRestored = false) {
        const results = {
            success: true,
            restoredProducts: [],
            errors: [],
            skipped: false
        };

        try {
            // Ki·ªÉm tra xem ƒë√£ ho√†n tr·∫£ ch∆∞a ƒë·ªÉ tr√°nh tr√πng l·∫∑p
            if (alreadyRestored) {
                console.log(`‚ö†Ô∏è ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£ kho tr∆∞·ªõc ƒë√≥, b·ªè qua`);
                results.skipped = true;
                return results;
            }

            console.log(`üîÑ B·∫Øt ƒë·∫ßu ho√†n tr·∫£ kho cho ƒë∆°n h√†ng ${orderId}`);

            for (const item of orderItems) {
                try {
                    const { product: productId, quantity, variantId } = item;

                    // T√¨m s·∫£n ph·∫©m
                    const product = await Product.findById(productId);
                    if (!product) {
                        results.errors.push({
                            productId,
                            error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"
                        });
                        continue;
                    }

                    // X·ª≠ l√Ω ho√†n tr·∫£ kho cho s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ
                    if (variantId) {
                        const variant = product.variants.find(v => v._id.toString() === variantId.toString());
                        if (!variant) {
                            results.errors.push({
                                productId,
                                variantId,
                                error: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m"
                            });
                            continue;
                        }

                        // Ho√†n tr·∫£ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ
                        variant.stock += quantity;
                        console.log(`üîÑ Ho√†n tr·∫£ ${quantity} s·∫£n ph·∫©m cho bi·∫øn th·ªÉ ${variant.name} (${variantId})`);

                    } else {
                        // Ho√†n tr·∫£ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ch√≠nh
                        product.stock += quantity;
                        console.log(`üîÑ Ho√†n tr·∫£ ${quantity} s·∫£n ph·∫©m cho ${product.name}`);
                    }

                    // L∆∞u s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
                    await product.save();

                    results.restoredProducts.push({
                        productId,
                        variantId: variantId || null,
                        quantity,
                        newStock: variantId ?
                            product.variants.find(v => v._id.toString() === variantId.toString())?.stock :
                            product.stock
                    });

                } catch (itemError) {
                    console.error(`‚ùå L·ªói khi ho√†n tr·∫£ kho cho s·∫£n ph·∫©m ${item.product}:`, itemError);
                    results.errors.push({
                        productId: item.product,
                        error: itemError.message
                    });
                }
            }

            // N·∫øu c√≥ l·ªói, ƒë√°nh d·∫•u k·∫øt qu·∫£ l√† th·∫•t b·∫°i
            if (results.errors.length > 0) {
                results.success = false;
                console.error(`‚ùå C√≥ ${results.errors.length} l·ªói khi ho√†n tr·∫£ kho cho ƒë∆°n h√†ng ${orderId}`);
            } else {
                console.log(`‚úÖ Ho√†n tr·∫£ kho th√†nh c√¥ng cho ƒë∆°n h√†ng ${orderId}`);
            }

            return results;

        } catch (error) {
            console.error(`‚ùå L·ªói nghi√™m tr·ªçng khi ho√†n tr·∫£ kho cho ƒë∆°n h√†ng ${orderId}:`, error);
            return {
                success: false,
                restoredProducts: [],
                errors: [{ error: error.message }],
                skipped: false
            };
        }
    }

    /**
     * Ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng c·ªßa s·∫£n ph·∫©m tr∆∞·ªõc khi ƒë·∫∑t h√†ng
     * @param {Array} orderItems - Danh s√°ch s·∫£n ph·∫©m c·∫ßn ki·ªÉm tra
     * @returns {Promise<Object>} K·∫øt qu·∫£ ki·ªÉm tra
     */
    static async checkAvailability(orderItems) {
        const results = {
            available: true,
            unavailableItems: [],
            availableItems: []
        };

        try {
            for (const item of orderItems) {
                const { product: productId, quantity, variantId } = item;

                const product = await Product.findById(productId);
                if (!product) {
                    results.unavailableItems.push({
                        productId,
                        error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"
                    });
                    continue;
                }

                let availableStock = 0;
                let itemType = "product";

                if (variantId) {
                    const variant = product.variants.find(v => v._id.toString() === variantId.toString());
                    if (!variant) {
                        results.unavailableItems.push({
                            productId,
                            variantId,
                            error: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m"
                        });
                        continue;
                    }
                    availableStock = variant.stock;
                    itemType = "variant";
                } else {
                    availableStock = product.stock;
                }

                if (availableStock >= quantity) {
                    results.availableItems.push({
                        productId,
                        variantId: variantId || null,
                        quantity,
                        availableStock,
                        itemType
                    });
                } else {
                    results.unavailableItems.push({
                        productId,
                        variantId: variantId || null,
                        quantity,
                        availableStock,
                        itemType,
                        error: "Kh√¥ng ƒë·ªß h√†ng trong kho"
                    });
                }
            }

            results.available = results.unavailableItems.length === 0;
            return results;

        } catch (error) {
            console.error("‚ùå L·ªói khi ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng:", error);
            return {
                available: false,
                unavailableItems: [{ error: error.message }],
                availableItems: []
            };
        }
    }

    /**
     * X√≥a reservation kh·ªèi gi·ªè h√†ng sau khi ƒë·∫∑t ƒë∆°n th√†nh c√¥ng
     * @param {string} userId - ID ng∆∞·ªùi d√πng
     * @param {Array} orderItems - Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t
     * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a reservation
     */
    static async clearReservations(userId, orderItems) {
        const results = {
            success: true,
            clearedReservations: [],
            errors: []
        };

        try {
            console.log(`üßπ B·∫Øt ƒë·∫ßu x√≥a reservation cho user ${userId}`);

            for (const item of orderItems) {
                try {
                    const { product: productId } = item;

                    // T√¨m v√† x√≥a reservation
                    const reservation = await ProductReservation.findOne({
                        product: productId,
                        user: userId,
                        isActive: true
                    });

                    if (reservation) {
                        reservation.isActive = false;
                        await reservation.save();

                        results.clearedReservations.push({
                            productId,
                            reservationId: reservation._id
                        });

                        console.log(`üßπ ƒê√£ x√≥a reservation cho s·∫£n ph·∫©m ${productId}`);
                    }

                } catch (itemError) {
                    console.error(`‚ùå L·ªói khi x√≥a reservation cho s·∫£n ph·∫©m ${item.product}:`, itemError);
                    results.errors.push({
                        productId: item.product,
                        error: itemError.message
                    });
                }
            }

            if (results.errors.length > 0) {
                results.success = false;
            }

            console.log(`‚úÖ X√≥a reservation ho√†n t·∫•t cho user ${userId}`);
            return results;

        } catch (error) {
            console.error(`‚ùå L·ªói nghi√™m tr·ªçng khi x√≥a reservation cho user ${userId}:`, error);
            return {
                success: false,
                clearedReservations: [],
                errors: [{ error: error.message }]
            };
        }
    }
}

export default InventoryService;
