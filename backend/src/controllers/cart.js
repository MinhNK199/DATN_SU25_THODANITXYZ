import Cart from "../models/Cart.js";
import ProductReservation from "../models/ProductReservation.js";
import Coupon from "../models/Coupon.js";
import Product from "../models/Product.js";
import VariantStockService from "../services/variantStockService.js";

// Helper function ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng c√≥ s·∫µn th·ª±c t·∫ø
const getAvailableStock = async(productId) => {
    const product = await Product.findById(productId);
    if (!product) return 0;

    const reservedQuantity = await ProductReservation.getReservedQuantity(productId);
    return Math.max(0, product.stock - reservedQuantity);
};

// L·∫•y gi·ªè h√†ng c·ªßa user
export const getCart = async(req, res) => {
    try {
        const cart = await Cart.findOne({ user: req.user._id })
            .populate({
                path: 'items.product',
                select: 'name price salePrice images stock variants'
            })
            .populate('coupon', 'code value type');

        if (cart) {
            // L·ªçc b·ªè c√°c item m√† product b·ªã null (s·∫£n ph·∫©m ƒë√£ b·ªã x√≥a kh·ªèi DB)
            cart.items = cart.items.filter(item => item.product);
            // ‚úÖ S·ª¨ D·ª§NG VARIANT STOCK SERVICE ƒê·ªÇ L·∫§Y STOCK CH√çNH X√ÅC
            console.log(`üîç ƒêang c·∫≠p nh·∫≠t stock cho ${cart.items.length} items trong gi·ªè h√†ng`);

            for (let item of cart.items) {
                if (!item.product) continue;

                let availableStock = 0;
                let variantStock = 0;

                if (item.variantId) {
                    // ‚úÖ X·ª¨ L√ù S·∫¢N PH·∫®M C√ì BI·∫æN TH·ªÇ - L·∫§Y STOCK T·ª™ VARIANT
                    console.log(`üì¶ X·ª≠ l√Ω s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ: ${item.product.name} - Variant: ${item.variantId}`);

                    // T√¨m variant trong product.variants
                    const variant = item.product.variants.find(v => v._id.toString() === item.variantId.toString());

                    // N·∫øu ch∆∞a c√≥ variantInfo ho·∫∑c variantInfo r·ªóng, populate t·ª´ product.variants
                    if (!item.variantInfo && variant) {
                        item.variantInfo = {
                            _id: variant._id,
                            name: variant.name,
                            color: variant.color,
                            size: variant.size,
                            sku: variant.sku,
                            images: variant.images,
                            price: variant.price,
                            salePrice: variant.salePrice,
                            stock: variant.stock
                        };
                        // L∆∞u l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t database
                        await cart.save();
                    }

                    // L·∫•y stock th·ª±c t·∫ø c·ªßa bi·∫øn th·ªÉ
                    variantStock = await VariantStockService.getVariantStock(item.product._id, item.variantId);

                    // L·∫•y stock c√≥ s·∫µn (tr·ª´ ƒëi reservation)
                    availableStock = await VariantStockService.getAvailableVariantStock(
                        item.product._id,
                        item.variantId,
                        req.user._id
                    );

                    console.log(`üìä Stock bi·∫øn th·ªÉ: ${variantStock}, Stock c√≥ s·∫µn: ${availableStock}`);

                } else {
                    // ‚úÖ X·ª¨ L√ù S·∫¢N PH·∫®M KH√îNG C√ì BI·∫æN TH·ªÇ - L·∫§Y STOCK T·ª™ PRODUCT
                    console.log(`üì¶ X·ª≠ l√Ω s·∫£n ph·∫©m kh√¥ng c√≥ bi·∫øn th·ªÉ: ${item.product.name}`);

                    variantStock = item.product.stock || 0;
                    availableStock = await getAvailableStock(item.product._id);

                    console.log(`üìä Stock s·∫£n ph·∫©m: ${variantStock}, Stock c√≥ s·∫µn: ${availableStock}`);
                }

                // ‚úÖ C·∫¨P NH·∫¨T AVAILABLE STOCK CHO PRODUCT (S·ª¨ D·ª§NG STOCK C·ª¶A VARIANT)
                item.product.availableStock = variantStock;

                // ‚úÖ ƒêI·ªÄU CH·ªàNH S·ªê L∆Ø·ª¢NG N·∫æU V∆Ø·ª¢T QU√Å STOCK
                if (item.quantity > variantStock) {
                    console.log(`‚ö†Ô∏è ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng t·ª´ ${item.quantity} xu·ªëng ${variantStock} do v∆∞·ª£t qu√° stock`);
                    item.quantity = variantStock;
                }

                // ‚úÖ B·ªî SUNG VARIANTINFO V·ªöI STOCK CH√çNH X√ÅC
                if (item.variantId && item.product.variants) {
                    const variant = item.product.variants.find(v => v._id.toString() === item.variantId.toString());
                    if (variant && typeof variant === 'object') {
                        item.variantInfo = {
                            _id: variant._id,
                            name: variant.name || '',
                            images: Array.isArray(variant.images) ? variant.images : [],
                            price: typeof variant.price === 'number' ? variant.price : 0,
                            salePrice: typeof variant.salePrice === 'number' ? variant.salePrice : 0,
                            stock: variantStock, // ‚úÖ S·ª¨ D·ª§NG STOCK CH√çNH X√ÅC T·ª™ DATABASE
                            availableStock: variantStock, // ‚úÖ S·ª¨ D·ª§NG STOCK C·ª¶A VARIANT
                            color: (variant.color && typeof variant.color === 'object') ? variant.color : { code: '', name: '' },
                            size: typeof variant.size === 'number' ? variant.size : 0,
                            weight: typeof variant.weight === 'number' ? variant.weight : 0,
                            sku: variant.sku || '',
                            specifications: (variant.specifications && typeof variant.specifications === 'object') ? Object.fromEntries(Object.entries(variant.specifications)) : {},
                        };
                    }
                } else {
                    // ‚úÖ TH√äM AVAILABLE STOCK CHO S·∫¢N PH·∫®M KH√îNG C√ì BI·∫æN TH·ªÇ
                    item.product.availableStock = availableStock;
                }
            }
            // L∆∞u l·∫°i gi·ªè h√†ng n·∫øu c√≥ thay ƒë·ªïi
            await cart.save();
            // Populate l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ variants v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
            await cart.populate({
                path: 'items.product',
                select: 'name price salePrice images stock variants'
            });
            res.json(cart);
        } else {
            res.json({ items: [], totalItems: 0, totalPrice: 0 });
        }
    } catch (error) {
        console.error('‚ùå Cart API error:', error);
        res.status(500).json({ message: error.message });
    }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = async(req, res) => {
    try {
        const { productId, quantity, variantId } = req.body;

        // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }
        let variant = null;
        let specifications = {};
        let price = (product.salePrice && product.salePrice < product.price) ? product.salePrice : product.price;
        if (variantId) {
            // T√¨m variant b·∫±ng c√°ch so s√°nh _id
            variant = product.variants.find(v => v._id.toString() === variantId.toString());

            if (!variant) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ" });
            }
            specifications = variant.specifications || {};
            price = (variant.salePrice && variant.salePrice < variant.price) ? variant.salePrice : variant.price;
        }

        // L·∫•y s·ªë l∆∞·ª£ng c√≥ s·∫µn th·ª±c t·∫ø
        const availableStock = await getAvailableStock(productId);

        // T√¨m ho·∫∑c t·∫°o gi·ªè h√†ng
        let cart = await Cart.findOne({ user: req.user._id });
        let totalQuantity = quantity;
        let itemIndex = -1;
        if (cart) {
            // T√¨m item theo productId v√† variantId
            itemIndex = cart.items.findIndex(item => item.product.toString() === productId && String(item.variantId || '') === String(variantId || ''));
            if (itemIndex > -1) {
                totalQuantity = cart.items[itemIndex].quantity + quantity;
            }
        }
        // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√≥ ƒë·ªß kh√¥ng (t·ªïng s·ªë l∆∞·ª£ng c≈© + m·ªõi)
        if (availableStock < totalQuantity) {
            return res.status(400).json({
                message: `Ch·ªâ c√≤n ${availableStock} s·∫£n ph·∫©m trong kho`,
                availableStock: availableStock
            });
        }
        // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t reservation
        await ProductReservation.createReservation(productId, req.user._id, totalQuantity);
        if (cart) {
            if (itemIndex > -1) {
                cart.items[itemIndex].quantity = totalQuantity;
                cart.items[itemIndex].reservedAt = new Date();
                cart.items[itemIndex].price = price;
                cart.items[itemIndex].specifications = specifications;
                if (variantId) {
                    cart.items[itemIndex].variantId = variantId;
                    cart.items[itemIndex].variantInfo = {
                        _id: variant._id,
                        name: variant.name,
                        color: variant.color,
                        size: variant.size,
                        sku: variant.sku,
                        images: variant.images,
                        price: variant.price,
                        salePrice: variant.salePrice,
                        stock: variant.stock
                    };
                }
            } else {
                cart.items.push({
                    product: productId,
                    variantId: variantId || undefined,
                    variantInfo: variant ? {
                        _id: variant._id,
                        name: variant.name,
                        color: variant.color,
                        size: variant.size,
                        sku: variant.sku,
                        images: variant.images,
                        price: variant.price,
                        salePrice: variant.salePrice,
                        stock: variant.stock
                    } : undefined,
                    specifications,
                    quantity,
                    price,
                    reservedAt: new Date()
                });
            }
        } else {
            cart = new Cart({
                user: req.user._id,
                items: [{
                    product: productId,
                    variantId: variantId || undefined,
                    variantInfo: variant ? {
                        _id: variant._id,
                        name: variant.name,
                        color: variant.color,
                        size: variant.size,
                        sku: variant.sku,
                        images: variant.images,
                        price: variant.price,
                        salePrice: variant.salePrice,
                        stock: variant.stock
                    } : undefined,
                    specifications,
                    quantity,
                    price,
                    reservedAt: new Date()
                }]
            });
        }

        await cart.save();

        // Populate th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ tr·∫£ v·ªÅ
        await cart.populate({
            path: 'items.product',
            select: 'name price salePrice images stock variants'
        });

        // Sau khi populate product, b·ªï sung variantInfo cho t·ª´ng item n·∫øu c√≥ variantId
        for (let item of cart.items) {
            if (item.variantId && item.product.variants) {
                const variant = item.product.variants.find(v => v._id.toString() === item.variantId.toString());
                if (variant && typeof variant === 'object') {
                    item.variantInfo = {
                        _id: variant._id,
                        name: variant.name || '',
                        images: Array.isArray(variant.images) ? variant.images : [],
                        price: typeof variant.price === 'number' ? variant.price : 0,
                        salePrice: typeof variant.salePrice === 'number' ? variant.salePrice : 0,
                        stock: typeof variant.stock === 'number' ? variant.stock : 0,
                        color: (variant.color && typeof variant.color === 'object') ? variant.color : { code: '', name: '' },
                        size: typeof variant.size === 'number' ? variant.size : 0,
                        weight: typeof variant.weight === 'number' ? variant.weight : 0,
                        sku: variant.sku || '',
                        specifications: (variant.specifications && typeof variant.specifications === 'object') ? Object.fromEntries(Object.entries(variant.specifications)) : {},
                    };
                } else {
                    // N·∫øu kh√¥ng t√¨m th·∫•y variant, tr·∫£ v·ªÅ object r·ªóng ƒë·ªÉ tr√°nh l·ªói frontend
                    item.variantInfo = {
                        _id: '',
                        name: '',
                        images: [],
                        price: 0,
                        salePrice: 0,
                        stock: 0,
                        color: { code: '', name: '' },
                        size: 0,
                        weight: 0,
                        sku: '',
                        specifications: {},
                    };
                }
            }
        }

        // Populate product data
        await cart.populate({
            path: 'items.product',
            select: 'name price salePrice images stock variants'
        });

        // T·∫°o variantInfo cho t·∫•t c·∫£ items
        for (let item of cart.items) {
            if (item.variantId && item.product.variants) {
                const variant = item.product.variants.find(v => v._id.toString() === item.variantId.toString());
                if (variant && typeof variant === 'object') {
                    item.variantInfo = {
                        _id: variant._id,
                        name: variant.name || '',
                        images: Array.isArray(variant.images) ? variant.images : [],
                        price: typeof variant.price === 'number' ? variant.price : 0,
                        salePrice: typeof variant.salePrice === 'number' ? variant.salePrice : 0,
                        stock: typeof variant.stock === 'number' ? variant.stock : 0,
                        color: (variant.color && typeof variant.color === 'object') ? variant.color : { code: '', name: '' },
                        size: typeof variant.size === 'number' ? variant.size : 0,
                        weight: typeof variant.weight === 'number' ? variant.weight : 0,
                        sku: variant.sku || '',
                        specifications: (variant.specifications && typeof variant.specifications === 'object') ? Object.fromEntries(Object.entries(variant.specifications)) : {},
                    };
                }
            }
        }


        res.status(201).json(cart);
    } catch (error) {
        console.error('‚ùå Cart API error:', error);
        res.status(400).json({ message: error.message });
    }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
export const updateCartItem = async(req, res) => {
    try {
        const { quantity, variantId } = req.body;
        const { productId } = req.params;

        console.log(`üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ${productId}, variant: ${variantId}, quantity: ${quantity}`);

        // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }

        // ‚úÖ S·ª¨ D·ª§NG VARIANT STOCK SERVICE ƒê·ªÇ VALIDATE STOCK
        let availableStock = 0;
        let stockValidation = null;

        if (variantId) {
            // ‚úÖ X·ª¨ L√ù S·∫¢N PH·∫®M C√ì BI·∫æN TH·ªÇ - VALIDATE STOCK C·ª¶A VARIANT
            console.log(`üì¶ Ki·ªÉm tra stock cho bi·∫øn th·ªÉ: ${variantId}`);

            stockValidation = await VariantStockService.canUpdateQuantity(
                productId,
                variantId,
                quantity,
                req.user._id
            );

            availableStock = stockValidation.availableStock;

            if (!stockValidation.canUpdate) {
                console.log(`‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: ${stockValidation.message}`);
                return res.status(400).json({
                    message: stockValidation.message,
                    availableStock: availableStock,
                    requestedQuantity: quantity
                });
            }

        } else {
            // ‚úÖ X·ª¨ L√ù S·∫¢N PH·∫®M KH√îNG C√ì BI·∫æN TH·ªÇ - VALIDATE STOCK C·ª¶A PRODUCT
            console.log(`üì¶ Ki·ªÉm tra stock cho s·∫£n ph·∫©m: ${productId}`);

            // L·∫•y s·ªë l∆∞·ª£ng c√≥ s·∫µn th·ª±c t·∫ø (tr·ª´ ƒëi s·ªë l∆∞·ª£ng hi·ªán t·∫°i trong gi·ªè h√†ng c·ªßa user n√†y)
            const currentReservation = await ProductReservation.findOne({
                product: productId,
                user: req.user._id,
                isActive: true
            });

            const currentQuantity = currentReservation ? currentReservation.quantity : 0;
            const otherReservedQuantity = await ProductReservation.getReservedQuantity(productId) - currentQuantity;
            availableStock = Math.max(0, product.stock - otherReservedQuantity);

            // Ki·ªÉm tra s·ªë l∆∞·ª£ng m·ªõi c√≥ h·ª£p l·ªá kh√¥ng
            if (availableStock < quantity) {
                console.log(`‚ùå Kh√¥ng ƒë·ªß stock: c·∫ßn ${quantity}, c√≥ ${availableStock}`);
                return res.status(400).json({
                    message: `Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t t·ªëi ƒëa ${availableStock} s·∫£n ph·∫©m`,
                    availableStock: availableStock,
                    requestedQuantity: quantity
                });
            }
        }

        console.log(`‚úÖ Stock validation th√†nh c√¥ng: c√≥ th·ªÉ c·∫≠p nh·∫≠t ${quantity} s·∫£n ph·∫©m`);

        // C·∫≠p nh·∫≠t reservation
        await ProductReservation.createReservation(productId, req.user._id, quantity);

        // C·∫≠p nh·∫≠t gi·ªè h√†ng
        const cart = await Cart.findOne({ user: req.user._id });
        if (!cart) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
        }

        // T√¨m item theo productId v√† variantId (n·∫øu c√≥)
        const itemIndex = cart.items.findIndex(item =>
            item.product.toString() === productId &&
            String(item.variantId || '') === String(variantId || '')
        );

        if (itemIndex > -1) {
            const item = cart.items[itemIndex];
            item.quantity = quantity;
            item.reservedAt = new Date();

            // N·∫øu c√≥ variantId, c·∫≠p nh·∫≠t th√¥ng tin bi·∫øn th·ªÉ
            if (item.variantId) {
                const variant = product.variants.find(v => v._id.toString() === item.variantId.toString());
                if (variant) {
                    // C·∫≠p nh·∫≠t variantInfo v·ªõi th√¥ng tin m·ªõi nh·∫•t
                    item.variantInfo = {
                        _id: variant._id,
                        name: variant.name,
                        color: variant.color,
                        size: variant.size,
                        sku: variant.sku,
                        images: variant.images,
                        price: variant.price,
                        salePrice: variant.salePrice,
                        stock: variant.stock
                    };
                    // C·∫≠p nh·∫≠t gi√° n·∫øu c√≥ thay ƒë·ªïi
                    item.price = (variant.salePrice && variant.salePrice < variant.price) ? variant.salePrice : variant.price;
                }
            } else {
                // N·∫øu kh√¥ng c√≥ variantId, c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m
                item.price = (product.salePrice && product.salePrice < product.price) ? product.salePrice : product.price;
            }

            await cart.save();

            // Populate l·∫°i v·ªõi variants ƒë·ªÉ c√≥ th·ªÉ t√≠nh to√°n variantInfo
            await cart.populate({
                path: 'items.product',
                select: 'name price salePrice images stock variants'
            });

            // ‚úÖ B·ªî SUNG VARIANTINFO V·ªöI STOCK CH√çNH X√ÅC
            if (item.variantId && item.product.variants) {
                const variant = item.product.variants.find(v => v._id.toString() === item.variantId.toString());
                if (variant && typeof variant === 'object') {
                    // L·∫•y stock ch√≠nh x√°c t·ª´ database
                    const variantStock = await VariantStockService.getVariantStock(productId, item.variantId);

                    item.variantInfo = {
                        _id: variant._id,
                        name: variant.name || '',
                        images: Array.isArray(variant.images) ? variant.images : [],
                        price: typeof variant.price === 'number' ? variant.price : 0,
                        salePrice: typeof variant.salePrice === 'number' ? variant.salePrice : 0,
                        stock: variantStock, // ‚úÖ S·ª¨ D·ª§NG STOCK CH√çNH X√ÅC T·ª™ DATABASE
                        availableStock: variantStock, // ‚úÖ S·ª¨ D·ª§NG STOCK C·ª¶A VARIANT
                        color: (variant.color && typeof variant.color === 'object') ? variant.color : { code: '', name: '' },
                        size: typeof variant.size === 'number' ? variant.size : 0,
                        weight: typeof variant.weight === 'number' ? variant.weight : 0,
                        sku: variant.sku || '',
                        specifications: (variant.specifications && typeof variant.specifications === 'object') ? Object.fromEntries(Object.entries(variant.specifications)) : {},
                    };
                }
            } else {
                // ‚úÖ C·∫¨N NH·∫¨T AVAILABLE STOCK CHO S·∫¢N PH·∫®M KH√îNG C√ì BI·∫æN TH·ªÇ
                item.product.availableStock = availableStock;
            }

            res.json(cart);
        } else {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng" });
        }
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const removeFromCart = async(req, res) => {
    try {
        const { productId } = req.params;
        const { variantId } = req.body;

        // X√≥a reservation
        await ProductReservation.updateMany({
            product: productId,
            user: req.user._id,
            isActive: true
        }, {
            isActive: false
        });

        // C·∫≠p nh·∫≠t gi·ªè h√†ng
        const cart = await Cart.findOne({ user: req.user._id });
        if (!cart) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
        }

        // L·ªçc item theo productId v√† variantId (n·∫øu c√≥)
        cart.items = cart.items.filter(item => {
            const productMatch = item.product.toString() === productId;
            const variantMatch = variantId ? String(item.variantId || '') === String(variantId) : true;
            return !(productMatch && variantMatch);
        });

        await cart.save();

        await cart.populate('items.product', 'name price salePrice images stock');
        res.json(cart);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// X√≥a to√†n b·ªô gi·ªè h√†ng
export const clearCart = async(req, res) => {
    try {
        const cart = await Cart.findOne({ user: req.user._id });
        if (cart) {
            // X√≥a t·∫•t c·∫£ reservations c·ªßa user n√†y
            await ProductReservation.updateMany({
                user: req.user._id,
                isActive: true
            }, {
                isActive: false
            });

            // X√≥a t·∫•t c·∫£ items trong gi·ªè h√†ng
            cart.items = [];
            await cart.save();
        }
        res.json({ message: "ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng" });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// √Åp d·ª•ng m√£ gi·∫£m gi√° v√†o gi·ªè h√†ng
export const applyCoupon = async(req, res) => {
    try {
        const { code } = req.body;
        const cart = await Cart.findOne({ user: req.user._id })
            .populate('items.product', 'price');
        if (!cart) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
        }

        const coupon = await Coupon.findOne({ code, isActive: true });
        if (!coupon) {
            return res.status(404).json({ message: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" });
        }

        if (typeof coupon.isValid === "function" && !coupon.isValid()) {
            return res.status(400).json({ message: "M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n" });
        }

        cart.coupon = coupon._id;
        await cart.save();
        res.json(cart);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// API ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng c√≥ s·∫µn c·ªßa s·∫£n ph·∫©m
export const getProductAvailability = async(req, res) => {
    try {
        const { productId } = req.params;

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }

        const reservedQuantity = await ProductReservation.getReservedQuantity(productId);
        const availableStock = Math.max(0, product.stock - reservedQuantity);

        res.json({
            productId,
            totalStock: product.stock,
            reservedQuantity,
            availableStock
        });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};