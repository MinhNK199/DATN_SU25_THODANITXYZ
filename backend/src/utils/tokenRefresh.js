import jwt from 'jsonwebtoken';

// Ki·ªÉm tra token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng (tr∆∞·ªõc 1 gi·ªù)
export const isTokenExpiringSoon = (token) => {
    try {
        const decoded = jwt.decode(token);
        if (!decoded || !decoded.exp) return false;
        
        const now = Math.floor(Date.now() / 1000);
        const timeUntilExpiry = decoded.exp - now;
        const oneHour = 60 * 60; // 1 gi·ªù
        
        return timeUntilExpiry < oneHour;
    } catch (error) {
        return false;
    }
};

// T·∫°o token m·ªõi
export const generateNewToken = (userId) => {
    return jwt.sign(
        { id: userId },
        process.env.JWT_SECRET,
        { expiresIn: process.env.JWT_EXPIRE || '7d' }
    );
};

// Middleware ƒë·ªÉ ki·ªÉm tra v√† refresh token
export const checkAndRefreshToken = async (req, res, next) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        
        if (!token) {
            return next();
        }

        // Ki·ªÉm tra token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
        if (isTokenExpiringSoon(token)) {
            try {
                const decoded = jwt.verify(token, process.env.JWT_SECRET);
                
                // T·∫°o token m·ªõi
                const newToken = generateNewToken(decoded.id);
                
                // Th√™m v√†o response header ƒë·ªÉ frontend c√≥ th·ªÉ c·∫≠p nh·∫≠t
                res.set('X-New-Token', newToken);
                res.set('X-Token-Refreshed', 'true');
                
                console.log('üîÑ Token ƒë√£ ƒë∆∞·ª£c refresh cho user:', decoded.id);
            } catch (error) {
                // Token ƒë√£ h·∫øt h·∫°n, kh√¥ng th·ªÉ refresh
                console.log('‚ùå Kh√¥ng th·ªÉ refresh token ƒë√£ h·∫øt h·∫°n');
            }
        }
        
        next();
    } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra token:', error);
        next();
    }
};
